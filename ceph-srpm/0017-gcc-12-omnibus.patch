--- ceph-16.2.7/src/include/buffer.h.orig	2022-01-17 12:17:19.193356237 -0500
+++ ceph-16.2.7/src/include/buffer.h	2022-01-17 12:17:58.599639592 -0500
@@ -38,6 +38,7 @@
 # include <sys/mman.h>
 #endif
 
+#include <memory>
 #include <iosfwd>
 #include <iomanip>
 #include <list>
--- ceph-16.2.7/src/common/LogEntry.cc.orig	2022-01-17 13:52:10.799134159 -0500
+++ ceph-16.2.7/src/common/LogEntry.cc	2022-01-17 13:52:47.244469274 -0500
@@ -183,7 +183,7 @@
       return "crit";
     default:
       ceph_abort();
-      return 0;
+      return "";
   }
 }
 
--- ceph-16.2.7/src/test/librados/tier_cxx.cc.orig	2022-01-19 09:30:47.209459506 -0500
+++ ceph-16.2.7/src/test/librados/tier_cxx.cc	2022-01-19 10:02:47.783240298 -0500
@@ -114,7 +114,7 @@
 #include "rgw/rgw_common.h"
 
 void check_fp_oid_refcount(librados::IoCtx& ioctx, std::string foid, uint64_t count,
-			   std::string fp_algo = NULL)
+			   std::string fp_algo = "")
 {
   bufferlist t;
   int size = foid.length();
@@ -142,7 +142,7 @@
   ASSERT_LE(count, refs.count());
 }
 
-string get_fp_oid(string oid, std::string fp_algo = NULL)
+string get_fp_oid(string oid, std::string fp_algo = "")
 {
   if (fp_algo == "sha1") {
     unsigned char fingerprint[CEPH_CRYPTO_SHA1_DIGESTSIZE + 1];
--- ceph-16.2.7/src/test/test_trans.cc.orig	2022-01-19 13:24:33.460008897 -0500
+++ ceph-16.2.7/src/test/test_trans.cc	2022-01-19 13:24:58.211554005 -0500
@@ -51,7 +51,7 @@
   cout << "#dev " << filename << std::endl;
   cout << "#mb " << mb << std::endl;
 
-  ObjectStore *fs = new FileStore(cct.get(), filename, NULL);
+  ObjectStore *fs = new FileStore(cct.get(), filename, "");
   if (fs->mount() < 0) {
     cout << "mount failed" << std::endl;
     return -1;
--- ceph-17.0.0-10335-gfd206722/src/s3select/include/s3select_functions.h.orig	2022-02-11 17:21:40.268627997 -0500
+++ ceph-17.0.0-10335-gfd206722/src/s3select/include/s3select_functions.h	2022-02-11 17:21:57.155325437 -0500
@@ -466,7 +466,7 @@
 
   std::string  print(int ident) override
   {
-    return std::string(0);
+    return std::string("");
   }
 
   void push_argument(base_statement* arg)
